for(i in 1:N){
yield[i] ~ dnorm(mu[i], sd = serr)
mu[i] <- b0[variety[i]] + b1[variety[i]]*moist[i]
}
for(i in 1:NVar){
b0 ~ dnorm(30, sd = 100)
b1 ~ dnorm(0, 10)
}
serr ~ dgamma(1.1, 1)
})
N <- 60
Nvar <- 10 # number of variety
moistFixConsts <- list(N=N, Nvar=Nvar)
moistData <- list(yield=moisture$yield,
moist=moisture$moisture,
variety=moisture$variety)
moistFixed.out <- nimbleMCMC(code = wheatFixedCode,
constants = moistFixConsts,
data = moistData,
niter = 202000,
nburnin = 2000,
thin = 100,
nchains = 5,
samplesAsCodaMCMC = T,
summary = T,
WAIC = T,
monitors = c("b0", "b1", "serr"))
wheatFixedCode <- nimbleCode({
for(i in 1:N){
yield[i] ~ dnorm(mu[i], sd = serr)
mu[i] <- b0[variety[i]] + b1[variety[i]]*moist[i]
}
for(i in 1:Nvar){
b0 ~ dnorm(30, sd = 100)
b1 ~ dnorm(0, 10)
}
serr ~ dgamma(1.1, 1)
})
N <- 60
Nvar <- 10 # number of variety
moistFixConsts <- list(N=N, Nvar=Nvar)
moistData <- list(yield=moisture$yield,
moist=moisture$moisture,
variety=moisture$variety)
moistFixed.out <- nimbleMCMC(code = wheatFixedCode,
constants = moistFixConsts,
data = moistData,
niter = 202000,
nburnin = 2000,
thin = 100,
nchains = 5,
samplesAsCodaMCMC = T,
summary = T,
WAIC = T,
monitors = c("b0", "b1", "serr"))
wheatFixedCode <- nimbleCode({
for(i in 1:N){
yield[i] ~ dnorm(mu[i], sd = serr)
mu[i] <- b0[variety[i]] + b1[variety[i]]*moist[i]
}
for(i in 1:Nvar){
b0 ~ dnorm(30, sd = 100)
b1 ~ dnorm(0, 10)
}
serr ~ dgamma(1.1, 1)
})
N <- 60
Nvar <- 10 # number of variety
moistFixConsts <- list(N=N, Nvar=Nvar)
moistData <- list(yield=moisture$yield,
moist=moisture$moisture,
variety=moisture$variety)
moistFixed.out <- nimbleMCMC(code = wheatFixedCode,
constants = moistFixConsts,
data = moistData,
niter = 202000,
nburnin = 2000,
thin = 100,
nchains = 5,
samplesAsCodaMCMC = T,
summary = T,
WAIC = T,
monitors = c("b0", "b1", "serr"))
wheatFixedCode <- nimbleCode({
for(i in 1:N){
yield[i] ~ dnorm(mu[i], sd = serr)
mu[i] <- b0[variety[i]] + b1[variety[i]]*moist[i]
}
for(i in 1:Nvar){
b0[i] ~ dnorm(30, sd = 100)
b1[i] ~ dnorm(0, 10)
}
serr ~ dgamma(1.1, 1)
})
N <- 60
Nvar <- 10 # number of variety
moistFixConsts <- list(N=N, Nvar=Nvar)
moistData <- list(yield=moisture$yield,
moist=moisture$moisture,
variety=moisture$variety)
moistFixed.out <- nimbleMCMC(code = wheatFixedCode,
constants = moistFixConsts,
data = moistData,
niter = 202000,
nburnin = 2000,
thin = 100,
nchains = 5,
samplesAsCodaMCMC = T,
summary = T,
WAIC = T,
monitors = c("b0", "b1", "serr"))
wheatRIntCode <- nimbleCode({
for(i in 1:N){
yield[i] ~ dnorm(mu[i], sd = serr)
mu[i] <- b0[variety[i]] + b1*moist[i]
}
for(i in 1:Nvar){
b0[i] ~ dnorm(mub0, sd = sint)
}
b1 ~ dnorm(0, 10)
mub0 ~ dnorm(30, sd=100)
serr ~ dgamma(1.1, 1)
sint ~ dgamma(1.1,.1)
})
N <- 60
Nvar <- 10 # number of variety
moistRIntConsts <- list(N=N, Nvar=Nvar, variety=moisture$variety)
moistData <- list(yield=moisture$yield,
moist=moisture$moisture,
variety=moisture$variety)
moistRInt.out <- nimbleMCMC(code = wheatRIntCode,
constants = moistRIntConsts,
data = moistData,
niter = 202000,
nburnin = 2000,
thin = 100,
nchains = 5,
samplesAsCodaMCMC = T,
summary = T,
WAIC = T,
monitors = c("b0", "b1", "serr", "sint", "mub0"))
# beta_0
mean(allsampsRInt[,1])
moistRInt.out$summary
moistRInt.out$WAIC
gelman.diag(moistRInt.out$samples)
allsampsRInt <- as.matrix(moistRInt.out$samples)
raftery.diag(allsampsRInt)
effectiveSize(allsampsRInt)
# beta_0
mean(allsampsRInt[,1])
# beta_1
mean(allsampsRInt[,2])
# std. error
mean(allsampsRInt[,3])
# var
mean(allsampsRInt[,3])^2
# WAIC
moistRInt.out$WAIC
allsamps
allsampsRInt
mean(allsampsRInt["sint"])
mean(allsampsRInt[,"sint"])
mean(allsampsRInt[,"serr"])
# sint
mean(allsampsRInt[,"sint"])
# beta_1
mean(allsampsRInt[,"b1"])
# beta_0
mean(allsampsRInt[,1:10])
# beta_0
mean(allsampsRInt[,"mub0"])
mean(allsampsRInt[,"mub0"]) == mean(allsampsRInt[,1:10])
mean(allsampsRInt[,"mub0"]) == mean(allsampsRInt[,1:10])
mean(allsampsRInt[,1:10])
wheatCode <- nimbleCode({
for(i in 1:N){
yield[i] ~ dnorm(mu[i], sd = serr)
mu[i] <- b0[variety[i]] + b1*moist[i]
}
for(i in 1:Nvar){
b0[i] ~ dnorm(mub0, sd = sint)
b1[i] ~ dnorm(mub1, sd=sslp)
}
mub0 ~ dnorm(30, sd=100)
mub1 ~ dnorm(0, 10)
serr ~ dgamma(1.1, 1)
sint ~ dgamma(1.1,.1)
sslp ~ dgamma(1.1,1)
})
N <- 60
Nvar <- 10 # number of variety
moistConsts <- list(N=N, Nvar=Nvar, variety=moisture$variety)
moistData <- list(yield=moisture$yield,
moist=moisture$moisture)
moist.out <- nimbleMCMC(code = wheatCode,
constants = moistConsts,
data = moistData,
niter = 202000,
nburnin = 2000,
thin = 100,
nchains = 5,
samplesAsCodaMCMC = T,
summary = T,
WAIC = T,
monitors = c("b0", "b1", "serr", "sint", "mub0", "mub1",
"sslp"))
wheatCode <- nimbleCode({
for(i in 1:N){
yield[i] ~ dnorm(mu[i], sd = serr)
mu[i] <- b0[variety[i]] + b1*moist[i]
}
for(i in 1:Nvar){
b0[i] ~ dnorm(mub0, sd = sint)
b1[i] ~ dnorm(mub1, sd=sslp)
}
mub0 ~ dnorm(30, sd=100)
mub1 ~ dnorm(0, 10)
serr ~ dgamma(1.1, 1)
sint ~ dgamma(1.1,.1)
sslp ~ dgamma(1.1,1)
})
N <- 60
Nvar <- 10 # number of variety
moistConsts <- list(N=N, Nvar=Nvar, variety=moisture$variety)
moistData <- list(yield=moisture$yield,
moist=moisture$moisture,
variety=moisture$variety)
moist.out <- nimbleMCMC(code = wheatCode,
constants = moistConsts,
data = moistData,
niter = 202000,
nburnin = 2000,
thin = 100,
nchains = 5,
samplesAsCodaMCMC = T,
summary = T,
WAIC = T,
monitors = c("b0", "b1", "serr", "sint", "mub0", "mub1",
"sslp"))
wheatCode <- nimbleCode({
for(i in 1:N){
yield[i] ~ dnorm(mu[i], sd = serr)
mu[i] <- b0[variety[i]] + b1*moist[i]
}
for(i in 1:Nvar){
b0[i] ~ dnorm(mub0, sd = sint)
b1[i] ~ dnorm(mub1, sd=sslp)
}
mub0 ~ dnorm(30, sd=100)
mub1 ~ dnorm(0, 10)
serr ~ dgamma(1.1, 1)
sint ~ dgamma(1.1,.1)
sslp ~ dgamma(1.1,1)
})
N <- 60
Nvar <- 10 # number of variety
moistConsts <- list(N=N, Nvar=Nvar, variety=moisture$variety)
moistData <- list(yield=moisture$yield,
moist=moisture$moisture,
variety=moisture$variety)
moist.out <- nimbleMCMC(code = wheatCode,
constants = moistConsts,
data = moistData,
niter = 202000,
nburnin = 2000,
thin = 100,
nchains = 5,
samplesAsCodaMCMC = T,
summary = T,
WAIC = T,
monitors = c("b0", "b1", "serr", "sint", "mub0", "mub1",
"sslp"))
wheatCode <- nimbleCode({
for(i in 1:N){
yield[i] ~ dnorm(mu[i], sd = serr)
mu[i] <- b0[variety[i]] + b1[variety[i]]*moist[i]
}
for(i in 1:Nvar){
b0[i] ~ dnorm(mub0, sd = sint)
b1[i] ~ dnorm(mub1, sd=sslp)
}
mub0 ~ dnorm(30, sd=100)
mub1 ~ dnorm(0, 10)
serr ~ dgamma(1.1, 1)
sint ~ dgamma(1.1,.1)
sslp ~ dgamma(1.1,1)
})
N <- 60
Nvar <- 10 # number of variety
moistConsts <- list(N=N, Nvar=Nvar, variety=moisture$variety)
moistData <- list(yield=moisture$yield,
moist=moisture$moisture,
variety=moisture$variety)
moist.out <- nimbleMCMC(code = wheatCode,
constants = moistConsts,
data = moistData,
niter = 202000,
nburnin = 2000,
thin = 100,
nchains = 5,
samplesAsCodaMCMC = T,
summary = T,
WAIC = T,
monitors = c("b0", "b1", "serr", "sint", "mub0", "mub1",
"sslp"))
# beta_0
mean(allsamps[,"mub0"])
moist.out$summary
moist.out$WAIC
gelman.diag(moist.out$samples)
allsamps <- as.matrix(moist.out$samples)
raftery.diag(allsamps)
effectiveSize(allsamps)
?dinterval
library(nimble)
library(coda)
?dinterval
library(tidyverse)
library(vroom)
setwd("C:/Users/jberg/Downloads")
dat <- vroom("IGF_youtube_views.csv")
View(dat)
dat |>
ggplot(aes(x = episode, y = extended)) +
geom_point()
dat |>
ggplot(aes(x = episode, y = extended)) +
geom_bar() +
geom_bar(aes(y = podcast))
dat |>
ggplot(aes(x = episode, y = extended)) +
geom_line()
?pivot_longer
setwd("~/")
dat <- vroom("ig_youtube_views.xlsx")
dat <- vroom("igf_youtube_views.xlsx")
View(dat)
dat <- vroom("igf_youtube_view_count.csv")
View(dat)
dat <- vroom("igf_youtube_view_count.csv") |>
select(1:5)
View(dat)
View(dat)
dat |>
ggplot(aes(x = ep_title,
y = view_count)) +
geom_line()
dat |>
ggplot(aes(x = ep_title,
y = view_count)) +
geom_point()
dat |>
ggplot(aes(x = ep_title,
y = view_count)) +
geom_bar()
dat |>
ggplot(aes(x = ep_title)) +
geom_bar()
dat |>
ggplot(aes(x = ep_title, y = view_count, fill = type_of_video)) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = release_date), vjust = -0.5, position = position_dodge(width = 1)) +
labs(x = "Episode Title", y = "View Count", fill = "Type of Interview") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
dat |>
filter(is.na()) |>
view()
dat |>
filter(is.na(dat)) |>
view()
dat <- !is.na(dat)
dat <- vroom("igf_youtube_view_count.csv") |>
select(1:5) |>
filter(is.na(dat))
dat <- vroom("igf_youtube_view_count.csv") |>
select(1:5) |>
na.omit()
dat <- vroom("igf_youtube_view_count.csv") |>
select(1:5)
dat <- na.omit(dat)
View(dat)
dat |>
ggplot(aes(x = ep_title, y = view_count, fill = type_of_video)) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = release_date), vjust = -0.5, position = position_dodge(width = 1)) +
labs(x = "Episode Title", y = "View Count", fill = "Type of Interview") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
dat |>
ggplot(aes(x = ep_title, y = view_count, fill = type_of_video)) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = release_date), vjust = -0.5, position = position_dodge(width = 1)) +
labs(x = "Episode Title", y = "View Count", fill = "Type of Interview") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
dat |>
ggplot(aes(x = ep_title, y = view_count, fill = type_of_video)) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = release_date), vjust = -0.5, position = position_dodge(width = 1)) +
labs(x = "Episode Title", y = "View Count", fill = "Type of Interview") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90))
, hjust = 1
dat |>
ggplot(aes(x = ep_title, y = view_count, fill = type_of_video)) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = release_date), vjust = -0.5, position = position_dodge(width = 1)) +
labs(x = "Episode Title", y = "View Count", fill = "Type of Interview") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
dat |>
ggplot(aes(x = ep_title, y = view_count, fill = type_of_video)) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = release_date), vjust = -0.5, position = position_dodge(width = 1)) +
labs(x = "Episode Title", y = "View Count", fill = "Type of Interview") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
update()
updateR()
update.packages()
install.packages("installr")
library(installr)
updateR()
setwd("~/BYU/STAT 348/BikeShare")
library(tidymodels)
install.packages("tidymodels")
library(tidyverse)
library(tidymodels)
library(vroom)
library(patchwork)
library(skimr)
library(DataExplorer)
library(GGally)
bike_train <- vroom("train.csv")
library(tidyverse)
library(tidymodels)
library(vroom)
library(patchwork)
library(skimr)
library(DataExplorer)
library(GGally)
bike_train <- vroom("train.csv")
bike_train$season <- as.factor(bike_train$season)
bike_train$weather <- as.factor(bike_train$weather)
bike_train$workingday <- as.factor(bike_train$workingday)
bike_train$holiday <- as.factor(bike_train$holiday)
bike_test <- vroom("test.csv")
bike_test$season <- as.factor(bike_test$season)
bike_test$weather <- as.factor(bike_test$weather)
bike_test$workingday <- as.factor(bike_test$workingday)
bike_test$holiday <- as.factor(bike_test$holiday)
bike_lm <- linear_reg() |>
set_engine("lm") |>
set_mode("regression") |>
fit(formula=log(count)~ . -casual -registered, data=bike_train)
bike_predictions <- predict(bike_lm, new_data = bike_test)
bike_lm
View(bike_test)
bike_train <- vroom("train.csv")
bike_train <- bike_train  |>
mutate(
season = as.factor(season),
weather = as.factor(weather),
workingday = as.factor(workingday),
holiday = as.factor(holiday)
)  |>
select(-casual, -registered)
bike_test <- vroom("test.csv")
bike_test <- bike_test %>%
mutate(
season = as.factor(season),
weather = as.factor(weather),
workingday = as.factor(workingday),
holiday = as.factor(holiday)
)
bike_lm <- linear_reg() |>
set_engine("lm") |>
set_mode("regression") |>
fit(formula=log(count)~ ., data=bike_train)
bike_predictions <- predict(bike_lm, new_data = bike_test)
bike_predictions
kaggle_submission <- bike_predictions |>
bind_cols(., bike_test) |>
select(datetime, .pred) |>
rename(count=.pred) |>
mutate(count=pmax(0, count)) |>
mutate(datetime=as.character(format(datetime)))
view(bike_predictions)
kaggle_submission <- bike_predictions |>
bind_cols(bike_test) |>
select(datetime, .pred) |>
rename(count=.pred) |>
mutate(count=pmax(0, count)) |>
mutate(datetime=as.character(format(datetime)))
view(kaggle_submission)
kaggle_submission <- bike_predictions |>
bind_cols(bike_test) |>
select(datetime, .pred) |>
rename(count=.pred) |>
mutate(count=pmax(0, count)) |>
mutate(datetime=as.character(format(datetime)),
count=e^count)
kaggle_submission <- bike_predictions |>
bind_cols(bike_test) |>
select(datetime, .pred) |>
rename(count=.pred) |>
mutate(count=pmax(0, count)) |>
mutate(datetime=as.character(format(datetime)),
count=exp(count))
View(kaggle_submission)
